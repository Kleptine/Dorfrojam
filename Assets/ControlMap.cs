//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.2
//     from Assets/ControlMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ControlMap : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ControlMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ControlMap"",
    ""maps"": [
        {
            ""name"": ""Default"",
            ""id"": ""cf5f5791-ea52-4c36-8db3-643f0c11bff8"",
            ""actions"": [
                {
                    ""name"": ""Place Tile"",
                    ""type"": ""Button"",
                    ""id"": ""7cea649c-4502-4668-ad40-8bee98a4176e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate Tile CW"",
                    ""type"": ""Button"",
                    ""id"": ""908e16e1-4228-44bf-8afd-5ae874cb5b06"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate Tile CCW"",
                    ""type"": ""Button"",
                    ""id"": ""ece1e596-311a-48d3-91ee-7d7e2f224abb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Mouse Position"",
                    ""type"": ""Value"",
                    ""id"": ""e2bea743-103c-4646-920b-5357ee8a74d8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Mouse Delta"",
                    ""type"": ""PassThrough"",
                    ""id"": ""bb079c16-9eba-4f79-9813-0122905c7474"",
                    ""expectedControlType"": ""Delta"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Drag Camera"",
                    ""type"": ""Button"",
                    ""id"": ""fd1fc14f-5f67-4967-95bd-9a2b2dd7a7a1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Zoom Camera"",
                    ""type"": ""Value"",
                    ""id"": ""2b5799b5-1c33-41a4-83c1-b6e9128f1eb5"",
                    ""expectedControlType"": ""Delta"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""af6c5047-2e49-4ae5-8d94-6276235d1378"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Place Tile"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""792ce61b-946f-45ba-bbe9-e0a1c6554c0a"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate Tile CW"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b8aaf789-5d06-4012-b4ed-0cdb4630f8d4"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate Tile CCW"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""01c1e8db-98d2-4020-be3c-4b4e45f492fb"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ff49a1b1-cdf2-4a9e-aac9-36a218b90a1b"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drag Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a7dde286-27c1-47e0-8e4c-d60586fc595f"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f494a9d2-8526-44dd-b95f-383704b511f7"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse Delta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Default
        m_Default = asset.FindActionMap("Default", throwIfNotFound: true);
        m_Default_PlaceTile = m_Default.FindAction("Place Tile", throwIfNotFound: true);
        m_Default_RotateTileCW = m_Default.FindAction("Rotate Tile CW", throwIfNotFound: true);
        m_Default_RotateTileCCW = m_Default.FindAction("Rotate Tile CCW", throwIfNotFound: true);
        m_Default_MousePosition = m_Default.FindAction("Mouse Position", throwIfNotFound: true);
        m_Default_MouseDelta = m_Default.FindAction("Mouse Delta", throwIfNotFound: true);
        m_Default_DragCamera = m_Default.FindAction("Drag Camera", throwIfNotFound: true);
        m_Default_ZoomCamera = m_Default.FindAction("Zoom Camera", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Default
    private readonly InputActionMap m_Default;
    private IDefaultActions m_DefaultActionsCallbackInterface;
    private readonly InputAction m_Default_PlaceTile;
    private readonly InputAction m_Default_RotateTileCW;
    private readonly InputAction m_Default_RotateTileCCW;
    private readonly InputAction m_Default_MousePosition;
    private readonly InputAction m_Default_MouseDelta;
    private readonly InputAction m_Default_DragCamera;
    private readonly InputAction m_Default_ZoomCamera;
    public struct DefaultActions
    {
        private @ControlMap m_Wrapper;
        public DefaultActions(@ControlMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @PlaceTile => m_Wrapper.m_Default_PlaceTile;
        public InputAction @RotateTileCW => m_Wrapper.m_Default_RotateTileCW;
        public InputAction @RotateTileCCW => m_Wrapper.m_Default_RotateTileCCW;
        public InputAction @MousePosition => m_Wrapper.m_Default_MousePosition;
        public InputAction @MouseDelta => m_Wrapper.m_Default_MouseDelta;
        public InputAction @DragCamera => m_Wrapper.m_Default_DragCamera;
        public InputAction @ZoomCamera => m_Wrapper.m_Default_ZoomCamera;
        public InputActionMap Get() { return m_Wrapper.m_Default; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DefaultActions set) { return set.Get(); }
        public void SetCallbacks(IDefaultActions instance)
        {
            if (m_Wrapper.m_DefaultActionsCallbackInterface != null)
            {
                @PlaceTile.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnPlaceTile;
                @PlaceTile.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnPlaceTile;
                @PlaceTile.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnPlaceTile;
                @RotateTileCW.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnRotateTileCW;
                @RotateTileCW.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnRotateTileCW;
                @RotateTileCW.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnRotateTileCW;
                @RotateTileCCW.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnRotateTileCCW;
                @RotateTileCCW.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnRotateTileCCW;
                @RotateTileCCW.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnRotateTileCCW;
                @MousePosition.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnMousePosition;
                @MousePosition.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnMousePosition;
                @MousePosition.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnMousePosition;
                @MouseDelta.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnMouseDelta;
                @MouseDelta.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnMouseDelta;
                @MouseDelta.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnMouseDelta;
                @DragCamera.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnDragCamera;
                @DragCamera.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnDragCamera;
                @DragCamera.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnDragCamera;
                @ZoomCamera.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnZoomCamera;
                @ZoomCamera.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnZoomCamera;
                @ZoomCamera.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnZoomCamera;
            }
            m_Wrapper.m_DefaultActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PlaceTile.started += instance.OnPlaceTile;
                @PlaceTile.performed += instance.OnPlaceTile;
                @PlaceTile.canceled += instance.OnPlaceTile;
                @RotateTileCW.started += instance.OnRotateTileCW;
                @RotateTileCW.performed += instance.OnRotateTileCW;
                @RotateTileCW.canceled += instance.OnRotateTileCW;
                @RotateTileCCW.started += instance.OnRotateTileCCW;
                @RotateTileCCW.performed += instance.OnRotateTileCCW;
                @RotateTileCCW.canceled += instance.OnRotateTileCCW;
                @MousePosition.started += instance.OnMousePosition;
                @MousePosition.performed += instance.OnMousePosition;
                @MousePosition.canceled += instance.OnMousePosition;
                @MouseDelta.started += instance.OnMouseDelta;
                @MouseDelta.performed += instance.OnMouseDelta;
                @MouseDelta.canceled += instance.OnMouseDelta;
                @DragCamera.started += instance.OnDragCamera;
                @DragCamera.performed += instance.OnDragCamera;
                @DragCamera.canceled += instance.OnDragCamera;
                @ZoomCamera.started += instance.OnZoomCamera;
                @ZoomCamera.performed += instance.OnZoomCamera;
                @ZoomCamera.canceled += instance.OnZoomCamera;
            }
        }
    }
    public DefaultActions @Default => new DefaultActions(this);
    public interface IDefaultActions
    {
        void OnPlaceTile(InputAction.CallbackContext context);
        void OnRotateTileCW(InputAction.CallbackContext context);
        void OnRotateTileCCW(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
        void OnMouseDelta(InputAction.CallbackContext context);
        void OnDragCamera(InputAction.CallbackContext context);
        void OnZoomCamera(InputAction.CallbackContext context);
    }
}
